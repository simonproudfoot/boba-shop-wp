Vue.component("checkout",{props:{stripePublishableKey:{type:String,required:!0},deliveryNonce:{type:String,required:!0},createOrderNonce:{type:String,required:!0},createStripeSessionNonce:{type:String,required:!0},adminAjaxUrl:{type:String,required:!0}},data:()=>({stripe:null,addressSaved:!1,isSubmitting:!1,isCreatingSession:!1}),computed:{},watch:{adminAjaxUrl:{handler(e,o){console.log("adminAjaxUrl changed:",{old:o,new:e})},immediate:!0}},mounted(){console.log("Checkout component mounted, initializing..."),console.log("Initial Vue component state:",{addressSaved:this.addressSaved,isSubmitting:this.isSubmitting,isCreatingSession:this.isCreatingSession,stripePublishableKey:this.stripePublishableKey,adminAjaxUrl:this.adminAjaxUrl}),"undefined"!=typeof Stripe?(this.stripe=Stripe(this.stripePublishableKey),console.log("Stripe initialized successfully")):console.error("Stripe library not loaded"),this.initializeRemoveItems(),console.log("Checkout component initialization complete");const e=document.getElementById("checkout-actions");console.log("Checkout actions div found:",e),e&&console.log("Checkout actions div HTML:",e.outerHTML)},methods:{async handleDeliveryAddressSubmission(e){if(e.preventDefault(),this.isSubmitting)return;console.log("Form submitted, preparing AJAX request..."),this.isSubmitting=!0;const o=e.target,t=new FormData(o);t.append("action","delivery_address_submission"),t.append("nonce",this.deliveryNonce),console.log("All form data:");for(let e of t.entries())console.log(e[0]+": "+e[1]);console.log("Form data prepared:",{action:"delivery_address_submission",nonce:this.deliveryNonce,customer_name:t.get("customer_name"),customer_email:t.get("customer_email")});const s=o.querySelector('button[type="submit"]'),n=s.innerHTML;s.innerHTML="Saving...",s.disabled=!0,console.log("Sending AJAX request to:",this.adminAjaxUrl);try{const e=await fetch(this.adminAjaxUrl,{method:"POST",body:t});console.log("Response received:",e);const o=await e.json();console.log("Response data:",o),o.success?(console.log("Setting addressSaved to true..."),this.addressSaved=!0,console.log("addressSaved is now:",this.addressSaved),s.innerHTML="Address Saved âœ“",s.classList.remove("bg-green-600","hover:bg-green-700"),s.classList.add("bg-gray-500","cursor-default"),console.log("Address saved successfully, checkout button should now be visible"),console.log("Vue component state:",{addressSaved:this.addressSaved,isSubmitting:this.isSubmitting,isCreatingSession:this.isCreatingSession}),this.$forceUpdate()):(console.error("Failed to save address:",o.data),alert(o.data||"Failed to save address"),s.innerHTML=n,s.disabled=!1)}catch(e){console.error("Error during AJAX request:",e),alert("An error occurred while saving your address"),s.innerHTML=n,s.disabled=!1}finally{this.isSubmitting=!1}},async createOrder(){console.log("Creating order...");const e=new FormData;e.append("action","create_order"),e.append("nonce",this.createOrderNonce),console.log("Sending order creation request...");try{const o=await fetch(this.adminAjaxUrl,{method:"POST",body:e});console.log("Order creation response received:",o);const t=await o.json();if(console.log("Order creation data:",t),t.success)return console.log("Order created successfully:",t.data),t.data;throw console.error("Failed to create order:",t.data),new Error(t.data||"Failed to create order")}catch(e){throw console.error("Error creating order:",e),e}},async handleCheckoutClick(){if(this.addressSaved){if(!this.isCreatingSession){console.log("Checkout button clicked, creating order first...");try{await this.createOrder(),await this.createStripeSession()}catch(e){console.error("Error during checkout process:",e),alert("An error occurred during checkout: "+e.message)}}}else alert("Please save your delivery address first")},async createStripeSession(){if(this.isCreatingSession)return;this.isCreatingSession=!0;const e=new FormData;e.append("action","create_stripe_session"),e.append("nonce",this.createStripeSessionNonce),console.log("Creating Stripe session...");try{const o=await fetch(this.adminAjaxUrl,{method:"POST",body:e});if(console.log("Stripe session response received:",o),console.log("Response status:",o.status),console.log("Response headers:",o.headers),!o.ok)throw new Error("HTTP error! status: "+o.status);const t=o.headers.get("content-type");t&&t.includes("application/json")||console.warn("Response is not JSON, content-type:",t);const s=await o.text();let n;console.log("Response text:",s);try{n=JSON.parse(s)}catch(e){throw console.error("Failed to parse JSON:",e),console.error("Raw response:",s),new Error("Invalid JSON response: "+s.substring(0,100))}if(console.log("Stripe session data:",n),n.success){if(!this.stripe)throw new Error("Stripe not initialized");{const e=await this.stripe.redirectToCheckout({sessionId:n.data.session_id});e.error&&alert(e.error.message)}}else alert(n.data||"Failed to create payment session")}catch(e){console.error("Error creating Stripe session:",e),alert("An error occurred while creating payment session: "+e.message)}finally{this.isCreatingSession=!1}},resetCheckoutButton(){},initializeRemoveItems(){console.log("Initializing remove item functionality...");const e=document.querySelectorAll(".remove-item");console.log("Found remove buttons:",e.length),e.forEach(e=>{e.addEventListener("click",o=>{const t=e.getAttribute("data-product-id"),s=e.getAttribute("data-variant-id"),n=e.closest("tr");if(confirm("Are you sure you want to remove this item from your cart?")){const e=new XMLHttpRequest;e.open("POST",this.adminAjaxUrl,!0),e.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),e.onreadystatechange=function(){4===e.readyState&&200===e.status&&(n.remove(),window.location.reload())},e.send("action=remove_from_cart&product_id="+t+"&variant_id="+s)}})})},debugComponent(){console.log("=== Checkout Component Debug Info ==="),console.log("Vue Component State:"),console.log("- addressSaved:",this.addressSaved),console.log("- isSubmitting:",this.isSubmitting),console.log("- isCreatingSession:",this.isCreatingSession),console.log("- stripe:",this.stripe),console.log("- adminAjaxUrl:",this.adminAjaxUrl),console.log("- stripePublishableKey:",this.stripePublishableKey),console.log("\nDOM Elements:");const e=document.getElementById("checkout-actions");console.log("- checkout-actions div exists:",!!e),e&&(console.log("- checkout-actions div HTML:",e.outerHTML),console.log("- checkout-actions div computed style display:",window.getComputedStyle(e).display),console.log("- checkout-actions div computed style visibility:",window.getComputedStyle(e).visibility)),console.log("\nVue Component Instance:"),console.log("- $el:",this.$el),console.log("- $data:",this.$data),console.log("- $props:",this.$props),console.log("=== End Debug Info ===")},async testStripeConnection(){try{console.log("Testing Stripe connection...");const e=await fetch(this.adminAjaxUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"test_stripe_connection",nonce:this.createStripeSessionNonce})}),o=await e.json();o.success?(alert("Stripe connection test successful!"),console.log("Stripe test result:",o.data)):(alert("Stripe connection test failed: "+(o.data||"Unknown error")),console.error("Stripe test failed:",o.data))}catch(e){console.error("Error testing Stripe connection:",e),alert("Error testing Stripe connection: "+e.message)}}}});