{"version":3,"names":[],"mappings":"","sources":["lazy-load.js"],"sourcesContent":["// LAZY LOAD images with fallback\n// Lazy Load images.  Make sure image as data-src, data-srcset present, and loading=\"lazy\". Remove src attribute\n\nfunction lazyLoadImages() {\n\n  if ('IntersectionObserver' in window) {\n\n    const images = document.querySelectorAll('img[data-src][loading=\"lazy\"]:not(.loaded)');\n    const imageObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const image = entry.target;\n\n                image.src = image.dataset.src;\n                if ( image.dataset.srcset ) {\n                  image.srcset = image.dataset.srcset;\n                }\n\n                image.onload = () => {\n                  if ( image.classList.contains('opacity-0' ) ) {\n                    image.classList.add('!opacity-100');\n                  }\n                }\n\n                imageObserver.unobserve(image);\n\n                image.classList.add('loaded');\n            }\n        });\n    });\n\n    images.forEach(img => imageObserver.observe(img));\n\n  } else {\n\n    if ('loading' in HTMLImageElement.prototype) {\n      const images = document.querySelectorAll('img[data-src][loading=\"lazy\"]');\n      images.forEach(img => {\n          img.src = img.dataset.src;\n          if ( img.dataset.srcset ) {\n              img.srcset = img.dataset.srcset;\n          }\n      });\n    } else {\n      // Dynamically import the LazySizes library\n      const script = document.createElement('script');\n      script.src =\n          'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js';\n      document.body.appendChild(script);\n    }\n\n  }\n}\n\nfunction supportsHEVCAlpha() {\n  const navigator = window.navigator;\n  const ua = navigator.userAgent.toLowerCase()\n  const hasMediaCapabilities = !!(navigator.mediaCapabilities && navigator.mediaCapabilities.decodingInfo)\n  const isSafari = ((ua.indexOf('safari') != -1) && (!(ua.indexOf('chrome')!= -1) && (ua.indexOf('version/')!= -1)))\n  return isSafari && hasMediaCapabilities\n}\n\nfunction lazyLoadVideos() {\n  var lazyVideos = [].slice.call(document.querySelectorAll(\"video.lazy\"));\n\n  if (\"IntersectionObserver\" in window) {\n    var lazyVideoObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(video) {\n        if (video.isIntersecting) {\n          \n          for (var source in video.target.children) {\n            var videoSource = video.target.children[source];\n            if (typeof videoSource.tagName === \"string\" && videoSource.tagName === \"SOURCE\") {\n              if ( supportsHEVCAlpha() && videoSource.dataset.srcmov) {\n                videoSource.src = videoSource.dataset.srcmov;\n              } else {\n                videoSource.src = videoSource.dataset.src;\n              }\n            }\n          }\n          \n          video.target.load();\n          \n          video.target.addEventListener('timeupdate', (event) => {\n            setTimeout(function() {\n              video.target.classList.remove(\"lazy\", \"opacity-0\");\n            }, 500);\n          });\n          \n          lazyVideoObserver.unobserve(video.target);\n        }\n      });\n    });\n\n    lazyVideos.forEach(function(lazyVideo) {\n      lazyVideoObserver.observe(lazyVideo);\n    });\n  }\n}\n\nfunction dynLoadVideos() {\n  var lazyVideos = [].slice.call(document.querySelectorAll(\"video.eager\"));\n  if (lazyVideos.length) {\n    lazyVideos.forEach(function(video) {\n          \n          for (var source in video.children) {\n            var videoSource = video.children[source];\n            if (typeof videoSource.tagName === \"string\" && videoSource.tagName === \"SOURCE\") {\n              if ( supportsHEVCAlpha() && videoSource.dataset.srcmov) {\n                videoSource.src = videoSource.dataset.srcmov;\n              } else {\n                videoSource.src = videoSource.dataset.src;\n              }\n            }\n          }\n          \n          video.load();\n          \n          video.addEventListener('timeupdate', (event) => {\n            setTimeout(function() {\n              video.classList.remove(\"eager\", \"opacity-0\");\n            }, 500);\n          });\n    });\n\n  }\n}\n\n// safari doesn't load srcset images after ajax\nfunction resetSrcset() {\n  let ee = document.querySelectorAll('[loading=\"eager\"]:not(.loaded)');\n  if ( ee.length ) {\n      ee.forEach( (e) => {\n          let srcset = e.srcset;\n          e.srcset = '';\n          e.srcset = srcset;\n          e.classList.add('loaded');\n      })\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  lazyLoadImages();\n  lazyLoadVideos();\n  dynLoadVideos();\n});"],"file":"lazy-load.min.js"}